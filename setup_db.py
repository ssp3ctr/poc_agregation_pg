import asyncio
import asyncpg
import random
import json
import time
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, TIMESTAMP, String, text, insert
from sqlalchemy.future import select
from faker import Faker
from tqdm import tqdm
import os
from asyncpg.exceptions import PostgresError, DeadlockDetectedError
import random as rnd

DATABASE_URL = os.getenv("DATABASE_URL", "postgresql+asyncpg://user:password@db:5432/warehouse_db")

engine = create_async_engine(DATABASE_URL, echo=False, future=True)
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()
fake = Faker()


class WarehouseOperations(Base):
    __tablename__ = "warehouse_operations"

    id = Column(Integer, primary_key=True, autoincrement=True)
    product_id = Column(Integer, nullable=False)
    warehouse_id = Column(Integer, nullable=False)
    quantity = Column(Integer, nullable=False)
    operation_time = Column(TIMESTAMP, server_default=text("NOW()"))


class StockBalance(Base):
    __tablename__ = "stock_balance"

    product_id = Column(Integer, primary_key=True)
    warehouse_id = Column(Integer, primary_key=True)
    stock_balance = Column(Integer, default=0)


class ProductsStatus(Base):
    __tablename__ = "products_status"

    product_id = Column(Integer, primary_key=True)
    warehouse_id = Column(Integer, primary_key=True)
    status = Column(String, default=0)


class StatusChangeCounter(Base):
    __tablename__ = "status_change_counter"

    id = Column(Integer, primary_key=True, default=1)
    count = Column(Integer, default=0)


async def create_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
        await conn.run_sync(Base.metadata.create_all)

        # –û–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è-—Ç—Ä–∏–≥–≥–µ—Ä: –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏ –æ—Å—Ç–∞—Ç–∫–∏, –∏ —Å—Ç–∞—Ç—É—Å
        await conn.execute(text("""
            CREATE OR REPLACE FUNCTION update_stock_and_status() RETURNS TRIGGER AS $$
            DECLARE
                total_balance INTEGER;
                new_status TEXT;
            BEGIN
                -- –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
                INSERT INTO stock_balance (product_id, warehouse_id, stock_balance)
                VALUES (NEW.product_id, NEW.warehouse_id, NEW.quantity)
                ON CONFLICT (product_id, warehouse_id) 
                DO UPDATE SET stock_balance = stock_balance.stock_balance + EXCLUDED.stock_balance;

                -- –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ —Ç–æ–≤–∞—Ä—É
                SELECT SUM(stock_balance)
                INTO total_balance
                FROM stock_balance
                WHERE product_id = NEW.product_id AND warehouse_id = NEW.warehouse_id;

                -- –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                IF total_balance IS NULL OR total_balance <= 0 THEN
                    new_status := '–ó–∞–∫–æ–Ω—á–∏–ª—Å—è';
                ELSIF total_balance < 10 THEN
                    new_status := '–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è';
                ELSE
                    new_status := '–î–æ—Å—Ç—É–ø–µ–Ω';
                END IF;

                -- –í—Å—Ç–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
                INSERT INTO products_status (product_id, warehouse_id, status)
                VALUES (NEW.product_id, NEW.warehouse_id, new_status)
                ON CONFLICT (product_id, warehouse_id) DO UPDATE
                SET status = EXCLUDED.status
                WHERE products_status.status IS DISTINCT FROM EXCLUDED.status;

                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
        """))

        # –û–¥–∏–Ω —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ –≤—Å—Ç–∞–≤–∫—É –≤ warehouse_operations
        await conn.execute(text("""
            CREATE TRIGGER trg_update_stock_and_status
            AFTER INSERT ON warehouse_operations
            FOR EACH ROW
            EXECUTE FUNCTION update_stock_and_status();
        """))

        await conn.execute(text("""
            CREATE OR REPLACE FUNCTION notify_status_change() RETURNS TRIGGER AS $$
            DECLARE
                payload TEXT;
            BEGIN
                IF NEW.status IS DISTINCT FROM OLD.status THEN
                    payload := json_build_object(
                        'product_id', NEW.product_id,
                        'warehouse_id', NEW.warehouse_id,
                        'old_status', OLD.status,
                        'new_status', NEW.status
                    )::text;
            
                    -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    PERFORM pg_notify('status_channel', payload);
            
                    -- ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
                    UPDATE status_change_counter
                    SET count = count + 1
                    WHERE id = 1;
                END IF;
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
        """))

        await conn.execute(text("""
            DROP TRIGGER IF EXISTS trg_notify_status_change ON products_status;
        """))

        await conn.execute(text("""
            CREATE TRIGGER trg_notify_status_change
            AFTER UPDATE ON products_status
            FOR EACH ROW
            WHEN (OLD.status IS DISTINCT FROM NEW.status)
            EXECUTE FUNCTION notify_status_change();
        """))

        await conn.execute(text("""
            INSERT INTO status_change_counter (id, count)
            VALUES (1, 0)
            ON CONFLICT (id) DO NOTHING;
        """))

    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏ —Ç—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω—ã!")


async def generate_test_data():
    async with SessionLocal() as session:
        total_records = 500_000
        product_ids = list(range(1, 11))
        warehouse_ids = list(range(1, 11))

        start_time = time.time()
        batch_size = 5_000

        for _ in tqdm(range(total_records // batch_size), desc="üì¶ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"):
            values = [
                {
                    "product_id": random.choice(product_ids),
                    "warehouse_id": random.choice(warehouse_ids),
                    "quantity": random.randint(-5, 5),
                }
                for _ in range(batch_size)
            ]
            values.sort(key=lambda x: (x['product_id'], x['warehouse_id']))

            for attempt in range(3):
                try:
                    await session.execute(text("SET LOCAL lock_timeout = '2000ms'"))
                    await session.execute(insert(WarehouseOperations), values)
                    await session.commit()
                    break  # —É—Å–ø–µ—à–Ω–æ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ retry
                except (DeadlockDetectedError, PostgresError) as e:
                    await session.rollback()
                    print(f"‚õî –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3): {e}")
                    await asyncio.sleep(rnd.uniform(0.1, 0.3))  # –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                except Exception as e:
                    await session.rollback()
                    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    break  # –Ω–µ retry, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–∞—è

        end_time = time.time()
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ insert –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")


async def generate_test_data2():
    async with SessionLocal() as session:
        total_records = 500_000
        product_ids = list(range(6, 11))
        warehouse_ids = list(range(6, 11))

        start_time = time.time()

        batch_size = 5_000
        for _ in tqdm(range(total_records // batch_size), desc="üì¶ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"):
            batch = [
                WarehouseOperations(
                    product_id=random.choice(product_ids),
                    warehouse_id=random.choice(warehouse_ids),
                    quantity=random.randint(-5, 5)
                )
                for _ in range(batch_size)
            ]

            batch.sort(key=lambda x: (x.product_id, x.warehouse_id))

            for attempt in range(3):
                try:
                    await session.execute(text("SET LOCAL lock_timeout = '2000ms'"))
                    session.add_all(batch)  # ‚úÖ –£–ë–†–ê–ù await
                    await session.commit()
                    break
                except (DeadlockDetectedError, PostgresError) as e:
                    await session.rollback()
                    print(f"‚õî –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3): {e}")
                    await asyncio.sleep(rnd.uniform(0.1, 0.3))
                except Exception as e:
                    await session.rollback()
                    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    break

        end_time = time.time()
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ add_all –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")


async def check_stock_balances():
    async with SessionLocal() as session:
        print("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º:")
        result = await session.execute(select(StockBalance))
        balances = result.scalars().all()  # –ø–æ–ª—É—á–∞–µ–º ORM-–æ–±—ä–µ–∫—Ç—ã

        if not balances:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ stock_balance")
            return

        for row in balances[:10]:
            print(f"–¢–æ–≤–∞—Ä {row.product_id} –Ω–∞ —Å–∫–ª–∞–¥–µ {row.warehouse_id} -> {row.stock_balance} —à—Ç.")


async def main():
    await create_tables()

    # add_all
    #await generate_test_data2()
    #await check_stock_balances()

    # insert
    await generate_test_data()
    await check_stock_balances()


if __name__ == "__main__":
    asyncio.run(main())
